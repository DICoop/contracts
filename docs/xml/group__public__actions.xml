<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="ru">
  <compounddef id="group__public__actions" kind="group">
    <compoundname>public_actions</compoundname>
    <title>ACTIONS</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__public__actions_1gacdfebb1a75a61c5d88ac5c280033d5b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::newaccount</definition>
        <argsstring>(eosio::name registrator, eosio::name referer, eosio::name username, eosio::public_key public_key, eosio::asset cpu, eosio::asset net, uint64_t ram_bytes, std::string meta)</argsstring>
        <name>newaccount</name>
        <qualifiedname>registrator::newaccount</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>registrator</declname>
          <defname>payer</defname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>referer</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>eosio::public_key</type>
          <declname>public_key</declname>
        </param>
        <param>
          <type>eosio::asset</type>
          <declname>cpu</declname>
        </param>
        <param>
          <type>eosio::asset</type>
          <declname>net</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>ram_bytes</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>meta</declname>
        </param>
        <briefdescription>
<para>Регистрирует новый аккаунт. </para>
        </briefdescription>
        <detaileddescription>
<para>Действие позволяет создать новый аккаунт, выполнив все необходимые шаги по резервированию RAM, делегированию CPU и NET, а также регистрации пользователя в контракте. <simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>payer</computeroutput> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>payer</parametername>
</parameternamelist>
<parameterdescription>
<para>Аккаунт, который оплачивает создание нового аккаунта. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referer</parametername>
</parameternamelist>
<parameterdescription>
<para>Реферер, который представил нового пользователя. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя нового аккаунта. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>public_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Открытый ключ нового аккаунта. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Количество AXON, делегированных на CPU для нового аккаунта. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>net</parametername>
</parameternamelist>
<parameterdescription>
<para>Количество AXON, делегированных на NET для нового аккаунта. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ram_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Количество RAM в байтах для нового аккаунта. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Дополнительная мета-информация. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="41" column="9" bodyfile="registrator/registrator.cpp" bodystart="22" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga25589c2c87b594bea2a82aea5bd1112c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::reguser</definition>
        <argsstring>(eosio::name username, std::string profile_hash)</argsstring>
        <name>reguser</name>
        <qualifiedname>registrator::reguser</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>profile_hash</declname>
        </param>
        <briefdescription>
<para>Регистрация пользователя </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод предназначен для регистрации аккаунта в качестве физического лица. После регистрации пользователь получает статус &quot;user&quot;. Принимает хэш-ссылку на зашифрованный профиль, сохраненный в IPFS.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя пользователя, который регистрируется </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>profile_hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Хэш-ссылка на зашифрованный профиль пользователя, сохраненный в IPFS</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="33" column="9" bodyfile="registrator/registrator.cpp" bodystart="85" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga7bb89160d6aa3dc59c5f78daeb0a6476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::verificate</definition>
        <argsstring>(eosio::name username)</argsstring>
        <name>verificate</name>
        <qualifiedname>registrator::verificate</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <briefdescription>
<para>Верификация аккаунта </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет верифицировать аккаунты как пользователей, так и организаций. На данный момент может быть применен только аккаунтом автономной некоммерческой организации &quot;Кооперативная Экономика&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя аккаунта, который подлежит верификации</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>_ano</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="39" column="9" bodyfile="registrator/registrator.cpp" bodystart="127" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga917f5557795120c2e303be599030d563" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::regorg</definition>
        <argsstring>(new_org_struct new_org)</argsstring>
        <name>regorg</name>
        <qualifiedname>registrator::regorg</qualifiedname>
        <param>
          <type><ref refid="structnew__org__struct" kindref="compound">new_org_struct</ref></type>
          <declname>new_org</declname>
        </param>
        <briefdescription>
<para>Регистрация юридического лица </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет регистрировать аккаунт в качестве юридического лица. Все данные в карточке юридического лица публичны и хранятся в блокчейне.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_org</parametername>
</parameternamelist>
<parameterdescription>
<para>Структура данных нового юридического лица</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>new_org.username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="35" column="9" bodyfile="registrator/registrator.cpp" bodystart="170" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga575710c03cd02b5e813816ea7e51500e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::joincoop</definition>
        <argsstring>(eosio::name coop_username, eosio::name username, std::string position_title, eosio::name position, std::string ricardian_data, std::string statement_hash)</argsstring>
        <name>joincoop</name>
        <qualifiedname>registrator::joincoop</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>coop_username</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>position_title</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>position</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ricardian_data</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>statement_hash</declname>
        </param>
        <briefdescription>
<para>Подача заявления на членство в кооперативе </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет подать заявление на вступление в кооператив от имени физического или юридического лица. После подачи заявления, оно направляется на рассмотрение в совет кооператива для голосования.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coop_username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя заявителя </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position_title</parametername>
</parameternamelist>
<parameterdescription>
<para>Наименование должности заявителя </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Код должности заявителя, который может быть одним из следующего списка:<itemizedlist>
<listitem><para>chairman</para>
</listitem><listitem><para>vpchairman</para>
</listitem><listitem><para>director</para>
</listitem><listitem><para>vpdirector</para>
</listitem><listitem><para>boardmember</para>
</listitem><listitem><para>execmember</para>
</listitem><listitem><para>votingmember</para>
</listitem><listitem><para>assocmember </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ricardian_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Переменные шаблона заявления, которые вставляются в рикардианский договор, содержащийся в ABI метода действия контракта. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>statement_hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Хэш ссылка на заявление</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="37" column="9" bodyfile="registrator/registrator.cpp" bodystart="226" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1gac68fe89b4be51de18ac5b5921ca56eed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::update</definition>
        <argsstring>(eosio::name username, std::string meta)</argsstring>
        <name>update</name>
        <qualifiedname>registrator::update</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>meta</declname>
        </param>
        <briefdescription>
<para>Обновление метаданных аккаунта </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет обновить метаданные указанного аккаунта. Только владелец аккаунта имеет право обновлять его метаданные.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя аккаунта, который требуется обновить </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Новые метаданные для аккаунта</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="30" column="9" bodyfile="registrator/registrator.cpp" bodystart="251" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga68df314fe90a719f00f0931c097bc6c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::changekey</definition>
        <argsstring>(eosio::name username, eosio::public_key public_key)</argsstring>
        <name>changekey</name>
        <qualifiedname>registrator::changekey</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>eosio::public_key</type>
          <declname>public_key</declname>
        </param>
        <briefdescription>
<para>Изменение ключа активной учетной записи </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет изменить активный ключ указанной учетной записи. Только аккаунт автономной некомерческой организации &quot;Кооперативная Экономика&quot; имеет право изменять ключи учетных записей.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя аккаунта, ключ которого требуется изменить </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>public_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Новый публичный ключ для активной учетной записи</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>_ano</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="46" column="9" bodyfile="registrator/registrator.cpp" bodystart="281" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1gade0cb6032b21e1b753ec1b4f2b4bea73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::confirmreg</definition>
        <argsstring>(eosio::name coop_username, eosio::name member, std::string position_title, eosio::name position)</argsstring>
        <name>confirmreg</name>
        <qualifiedname>registrator::confirmreg</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>coop_username</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>member</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>position_title</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Подтверждение регистрации члена кооператива </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет подтвердить регистрацию пользователя (физического или юридического лица) в качестве члена кооператива. Подтверждение может быть осуществлено только аккаунтом контракта совета кооператива после принятия соответствующего решения.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coop_username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя члена кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position_title</parametername>
</parameternamelist>
<parameterdescription>
<para>Название должности </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Код должности (например, chairman, director и др.)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>_soviet</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="31" column="9" bodyfile="registrator/registrator.cpp" bodystart="320" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga6d78c0a4a104abcae663754dc08d8da8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void marketplace::newid</definition>
        <argsstring>(uint64_t id, eosio::name type)</argsstring>
        <name>newid</name>
        <qualifiedname>marketplace::newid</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Пустой метод регистрации нового идентификатора</para>
<para>Этот метод используется для возврата информации из контракта. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>идентификатор </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>тип идентификатора </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="marketplace/marketplace.hpp" line="39" column="9" bodyfile="marketplace/marketplace.cpp" bodystart="17" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga3517422842b666b51776938bcebb2e2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void marketplace::moderate</definition>
        <argsstring>(eosio::name username, uint64_t exchange_id)</argsstring>
        <name>moderate</name>
        <qualifiedname>marketplace::moderate</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>exchange_id</declname>
        </param>
        <briefdescription>
<para>Модерация товара на маркетплейсе. </para>
        </briefdescription>
        <detaileddescription>
<para>Данный метод предназначен для модерации товара перед его публикацией на маркетплейсе. Метод может быть вызван только администратором маркетплейса.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя пользователя-администратора, который вызывает данный метод. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exchange_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Уникальный идентификатор товара, который нужно опубликовать после модерации.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="marketplace/marketplace.hpp" line="93" column="9" bodyfile="marketplace/src/admins.cpp" bodystart="15" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga7b9e65c0a9b8fc66441dd858d3bf7713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void marketplace::prohibit</definition>
        <argsstring>(eosio::name username, uint64_t exchange_id, std::string meta)</argsstring>
        <name>prohibit</name>
        <qualifiedname>marketplace::prohibit</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>exchange_id</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>meta</declname>
        </param>
        <briefdescription>
<para>Отказ в прохождении модерации заявки на товар. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод предназначен для администраторов маркетплейса, чтобы отказать в публикации товара после его модерации. При отказе администратор указывает причину отказа в параметре <computeroutput>meta</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя пользователя-администратора, который вызывает данный метод. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exchange_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Уникальный идентификатор товара, публикацию которого нужно запретить. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Строковое описание или причина, по которой товар не прошел модерацию.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="marketplace/marketplace.hpp" line="94" column="9" bodyfile="marketplace/src/admins.cpp" bodystart="48" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga330151d5b275e35f3f2d29b7d1d28a06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void marketplace::unpublish</definition>
        <argsstring>(eosio::name username, uint64_t exchange_id)</argsstring>
        <name>unpublish</name>
        <qualifiedname>marketplace::unpublish</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>exchange_id</declname>
        </param>
        <briefdescription>
<para>Снять товар с публикации на маркетплейсе. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод предназначен для снятия товара с публикации. Только владелец товара может снять его с публикации.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя пользователя, являющегося владельцем заявки. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exchange_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Идентификатор заявки, которую следует снять с публикации.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="marketplace/marketplace.hpp" line="95" column="9" bodyfile="marketplace/src/admins.cpp" bodystart="78" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1gafb7c81428848bbc7e9401cdbfa4544d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void marketplace::publish</definition>
        <argsstring>(eosio::name username, uint64_t exchange_id)</argsstring>
        <name>publish</name>
        <qualifiedname>marketplace::publish</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>exchange_id</declname>
        </param>
        <briefdescription>
<para>Опубликовать товар на маркетплейсе. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет владельцу товара опубликовать его на маркетплейсе. Для публикации товар должен находиться в статусе &quot;unpublished&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя пользователя, являющегося владельцем заявки. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exchange_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Идентификатор заявки, которую следует опубликовать.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="marketplace/marketplace.hpp" line="96" column="9" bodyfile="marketplace/src/admins.cpp" bodystart="103" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1gab643c84304eeca5b09587fa01ee7a5eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void marketplace::order</definition>
        <argsstring>(const exchange_params &amp;params)</argsstring>
        <name>order</name>
        <qualifiedname>marketplace::order</qualifiedname>
        <param>
          <type>const exchange_params &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Создать заявку на денежный паевой взнос. </para>
        </briefdescription>
        <detaileddescription>
<para>Данный метод позволяет пользователю создать заявку на денежный паевой взнос в системе.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Параметры для создания заявки на денежный паевой взнос.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>params.username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="marketplace/marketplace.hpp" line="73" column="9" bodyfile="marketplace/src/change.cpp" bodystart="35" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga74c30d5573748d4cf4c5a660568b2a60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void marketplace::offer</definition>
        <argsstring>(const exchange_params &amp;params)</argsstring>
        <name>offer</name>
        <qualifiedname>marketplace::offer</qualifiedname>
        <param>
          <type>const exchange_params &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Создать заявку на имущественный паевой взнос. </para>
        </briefdescription>
        <detaileddescription>
<para>Данный метод позволяет пользователю создать заявку на имущественный паевой взнос в системе.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Параметры для создания заявки на имущественный паевой взнос.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>params.username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="marketplace/marketplace.hpp" line="72" column="9" bodyfile="marketplace/src/change.cpp" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1gad92430513caeffc680137faf448dfa62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void marketplace::accept</definition>
        <argsstring>(eosio::name username, uint64_t exchange_id)</argsstring>
        <name>accept</name>
        <qualifiedname>marketplace::accept</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>exchange_id</declname>
        </param>
        <briefdescription>
<para>Подтверждение готовности выполнить заявку. </para>
        </briefdescription>
        <detaileddescription>
<para>Данный метод позволяет пользователю, который получил предложение по своей заявке, подтвердить свою готовность его принять и выполнить. При этом формируется пакет документов, который отправляется в совет на утверждение.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя пользователя, подтверждающего готовность выполнить предложение. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exchange_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID предложения, которое следует подтвердить.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="marketplace/marketplace.hpp" line="81" column="9" bodyfile="marketplace/src/change.cpp" bodystart="198" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga5a22790e2e3d7b7e99fe2bfab6c921ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void marketplace::decline</definition>
        <argsstring>(eosio::name username, uint64_t exchange_id, std::string meta)</argsstring>
        <name>decline</name>
        <qualifiedname>marketplace::decline</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>exchange_id</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>meta</declname>
        </param>
        <briefdescription>
<para>Отказ от предложения. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет пользователю отклонить предложение, представленное к его заявке. Выполняются следующие проверки:<itemizedlist>
<listitem><para>Существование предложения с указанным ID.</para>
</listitem><listitem><para>Существование основной заявки.</para>
</listitem><listitem><para>Предложение находится в статусе &quot;ожидание&quot;.</para>
</listitem></itemizedlist>
</para>
<para>Если отклонено предложение к заявке типа &quot;order&quot;, осуществляется возврат токенов пользователю, которому были заблокированы токены при создании предложения.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя пользователя, отклоняющего предложение. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exchange_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID предложения, которое следует отклонить. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Дополнительные метаданные, связанные с отказом.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="marketplace/marketplace.hpp" line="82" column="9" bodyfile="marketplace/src/change.cpp" bodystart="250" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga7a94bccd35c4e34b2be7278ecd23092f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void marketplace::complete</definition>
        <argsstring>(eosio::name username, uint64_t exchange_id)</argsstring>
        <name>complete</name>
        <qualifiedname>marketplace::complete</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>exchange_id</declname>
        </param>
        <briefdescription>
<para>Подписание акта о приёме-передаче имущества. </para>
        </briefdescription>
        <detaileddescription>
<para>После успешного получения товара, получатель подписывает акт о приёме-передаче, что свидетельствует о юридическом завершении сделки. Этот акт делает пакет документов по данной сделке полным. После проведения ряда проверок, обновляются статусы и количество объектов в основной заявке и предложении. Если все объекты основной заявки обработаны, заявка удаляется из публикации. В зависимости от типа предложения, может осуществляться перевод токенов.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя пользователя-получателя товара. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exchange_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID предложения, под которым следует подписать акт.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="marketplace/marketplace.hpp" line="85" column="9" bodyfile="marketplace/src/change.cpp" bodystart="289" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1gad65f1fa4ca14d3e25d2910a38770edaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void marketplace::cancel</definition>
        <argsstring>(eosio::name username, uint64_t exchange_id)</argsstring>
        <name>cancel</name>
        <qualifiedname>marketplace::cancel</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>exchange_id</declname>
        </param>
        <briefdescription>
<para>Отмена заявки и возврат токенов. </para>
        </briefdescription>
        <detaileddescription>
<para>Позволяет пользователю отменить родительскую или дочернюю заявку, а также обеспечивает возврат токенов владельцу (если применимо). При отмене проверяется наличие заявки и её текущий статус.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя пользователя, инициировавшего отмену. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exchange_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Идентификатор заявки для отмены.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="marketplace/marketplace.hpp" line="87" column="9" bodyfile="marketplace/src/change.cpp" bodystart="362" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga6424522b5a905f3340618bc496b0e8db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void marketplace::update</definition>
        <argsstring>(eosio::name username, uint64_t exchange_id, eosio::asset price_for_piece, std::string data, std::string meta)</argsstring>
        <name>update</name>
        <qualifiedname>marketplace::update</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>exchange_id</declname>
        </param>
        <param>
          <type>eosio::asset</type>
          <declname>price_for_piece</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>meta</declname>
        </param>
        <briefdescription>
<para>Отмена заявки и возврат токенов. </para>
        </briefdescription>
        <detaileddescription>
<para>Позволяет пользователю отменить родительскую или дочернюю заявку, а также обеспечивает возврат токенов владельцу (если применимо). При отмене проверяется наличие заявки и её текущий статус. Если заявка является родительской, вызывается метод <computeroutput>cancel_parent_order</computeroutput>, иначе — <computeroutput>cancel_child_order</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя пользователя, инициировавшего отмену. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exchange_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Идентификатор заявки для отмены.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="marketplace/marketplace.hpp" line="89" column="9" bodyfile="marketplace/src/change.cpp" bodystart="455" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga22590103c02d594a96c7fa0021c3cf6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void marketplace::addpieces</definition>
        <argsstring>(eosio::name username, uint64_t exchange_id, uint64_t new_pieces)</argsstring>
        <name>addpieces</name>
        <qualifiedname>marketplace::addpieces</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>exchange_id</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>new_pieces</declname>
        </param>
        <briefdescription>
<para>Добавление единиц товара к заявке. </para>
        </briefdescription>
        <detaileddescription>
<para>Метод позволяет владельцу заявки дополнительно увеличить количество товара, доступное для обмена в рамках указанной заявки. Используется, когда у продавца появляется дополнительное количество товара, которое он хочет добавить к существующей заявке.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя пользователя, инициировавшего добавление. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exchange_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Идентификатор заявки, к которой добавляются единицы товара. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_pieces</parametername>
</parameternamelist>
<parameterdescription>
<para>Количество новых единиц товара, которые следует добавить к заявке.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="marketplace/marketplace.hpp" line="90" column="9" bodyfile="marketplace/src/change.cpp" bodystart="486" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1gaada4a6d50780714dc9cfd6356a28a3dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void marketplace::authorize</definition>
        <argsstring>(uint64_t exchange_id)</argsstring>
        <name>authorize</name>
        <qualifiedname>marketplace::authorize</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>exchange_id</declname>
        </param>
        <briefdescription>
<para>Авторизация обмена советом. </para>
        </briefdescription>
        <detaileddescription>
<para>Метод используется для подтверждения согласия совета на заявленный обмен. Обычно этот метод вызывается после прохождения определенного процесса голосования или принятия решения советом. Авторизованный обмен считается утвержденным и может быть выполнен.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exchange_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Идентификатор заявки на обмен, которую следует авторизовать.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>_soviet</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="marketplace/marketplace.hpp" line="42" column="9" bodyfile="marketplace/src/soviet.cpp" bodystart="15" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga56d446612345f60629154447e0b8e108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void soviet::exec</definition>
        <argsstring>(eosio::name executer, eosio::name coop_username, uint64_t decision_id)</argsstring>
        <name>exec</name>
        <qualifiedname>eosio::soviet::exec</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>executer</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>coop_username</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>decision_id</declname>
        </param>
        <briefdescription>
<para>Исполнение решения совета </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет исполнить решение совета. Исполнение решения включает в себя проверку, что решение существует, что оно было авторизовано, и что оно еще не было выполнено. В зависимости от типа решения, вызывается соответствующая функция для его реализации.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>executer</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя аккаунта, который исполняет решение </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coop_username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decision_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Идентификатор решения для исполнения</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>executer</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soviet/soviet.hpp" line="22" column="9" bodyfile="soviet/soviet.cpp" bodystart="30" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga00c952b8cc000504ae105c82014217e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void soviet::addstaff</definition>
        <argsstring>(eosio::name coop_username, uint64_t board_id, eosio::name chairman, eosio::name username, std::vector&lt; right &gt; rights, std::string meta)</argsstring>
        <name>addstaff</name>
        <qualifiedname>eosio::soviet::addstaff</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>coop_username</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>board_id</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>chairman</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structright" kindref="compound">right</ref> &gt;</type>
          <declname>rights</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>meta</declname>
          <defname>position_title</defname>
        </param>
        <briefdescription>
<para>Добавление персонала кооператива </para>
        </briefdescription>
        <detaileddescription>
<para>Данный метод позволяет добавить в кооператив нового члена персонала с указанием определенных прав на выполнение методов действий вместо совета. Авторизация для выполнения этого метода требуется только от председателя совета кооператива.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coop_username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>board_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID совета кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chairman</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя председателя совета </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя нового члена персонала </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rights</parametername>
</parameternamelist>
<parameterdescription>
<para>Список прав, разрешенных для выполнения указанным членом персонала </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position_title</parametername>
</parameternamelist>
<parameterdescription>
<para>Название должности нового члена персонала</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>chairman</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soviet/soviet.hpp" line="26" column="9" bodyfile="soviet/src/admin.cpp" bodystart="19" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1gaff2ccc480f8674e7b2f1592ccff4f17b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void soviet::rmstaff</definition>
        <argsstring>(eosio::name coop_username, uint64_t board_id, eosio::name chairman, eosio::name username)</argsstring>
        <name>rmstaff</name>
        <qualifiedname>eosio::soviet::rmstaff</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>coop_username</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>board_id</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>chairman</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <briefdescription>
<para>Удаление персонала из кооператива </para>
        </briefdescription>
        <detaileddescription>
<para>Данный метод позволяет удалить члена персонала из кооператива. Авторизация для выполнения этого метода требуется только от председателя совета кооператива.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coop_username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>board_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID совета кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chairman</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя председателя совета </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя удаляемого члена персонала</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>chairman</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soviet/soviet.hpp" line="27" column="9" bodyfile="soviet/src/admin.cpp" bodystart="54" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1gab568d02a607f4a7c8310a4387ef2a37e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void soviet::setrights</definition>
        <argsstring>(eosio::name coop_username, uint64_t board_id, eosio::name chairman, eosio::name username, std::vector&lt; right &gt; rights)</argsstring>
        <name>setrights</name>
        <qualifiedname>eosio::soviet::setrights</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>coop_username</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>board_id</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>chairman</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structright" kindref="compound">right</ref> &gt;</type>
          <declname>rights</declname>
        </param>
        <briefdescription>
<para>Установка прав для персонала кооператива </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет установить конкретные права для члена персонала в кооперативе. Авторизация для выполнения этого метода требуется только от председателя совета кооператива.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coop_username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>board_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID совета кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chairman</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя председателя совета </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя члена персонала, для которого устанавливаются права </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rights</parametername>
</parameternamelist>
<parameterdescription>
<para>Вектор прав, которые будут установлены для указанного члена персонала</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>chairman</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soviet/soviet.hpp" line="28" column="9" bodyfile="soviet/src/admin.cpp" bodystart="86" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga3c28fb6fe494d72ba1a0de8d8eb7e930" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void soviet::validate</definition>
        <argsstring>(eosio::name coop_username, uint64_t board_id, eosio::name username, uint64_t decision_id)</argsstring>
        <name>validate</name>
        <qualifiedname>eosio::soviet::validate</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>coop_username</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>board_id</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>decision_id</declname>
        </param>
        <briefdescription>
<para>Предварительная валидация решения совета персоналом </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет персоналу подтвердить поступление оплаты или провести другую форму валидации перед принятием советом какого-либо решения.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coop_username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>board_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID совета кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя члена персонала, проводящего валидацию </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decision_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID решения, которое подлежит валидации</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soviet/soviet.hpp" line="29" column="9" bodyfile="soviet/src/admin.cpp" bodystart="118" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga3b326646392cc5dbccf6f76b5710d7bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void soviet::automate</definition>
        <argsstring>(eosio::name coop_username, uint64_t board_id, eosio::name member, eosio::name action_type, eosio::name provider, std::string encrypted_private_key)</argsstring>
        <name>automate</name>
        <qualifiedname>eosio::soviet::automate</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>coop_username</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>board_id</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>member</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>action_type</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>provider</declname>
          <defname>permission_name</defname>
        </param>
        <param>
          <type>std::string</type>
          <declname>encrypted_private_key</declname>
        </param>
        <briefdescription>
<para>Автоматизация подписи на решениях </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет члену совета автоматизировать подпись на решениях по определенным типам вопросов. Член совета может настроить автоматическую подпись для указанных типов действий.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coop_username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>board_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID совета кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя члена совета, который настраивает автоматизацию </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Тип действия для автоматизации </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>permission_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя разрешения для использования в автоматизированном действии </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encrypted_private_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Зашифрованный приватный ключ для автоматизации на аккаунт oracul по алгоритму Д-Х</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>member</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soviet/soviet.hpp" line="37" column="9" bodyfile="soviet/src/automator.cpp" bodystart="26" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1gae253ba528c69482ca3370ce5fcc02f61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void soviet::disautomate</definition>
        <argsstring>(eosio::name coop_username, uint64_t board_id, eosio::name member, uint64_t automation_id)</argsstring>
        <name>disautomate</name>
        <qualifiedname>eosio::soviet::disautomate</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>coop_username</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>board_id</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>member</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>automation_id</declname>
        </param>
        <briefdescription>
<para>Удаление настройки автоматизации подписи </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет члену совета удалить настройку автоматизации подписи на решениях по определенным типам вопросов.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coop_username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>board_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID совета кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя члена совета, который удаляет автоматизацию </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>automation_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Идентификатор автоматизации для удаления</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>member</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soviet/soviet.hpp" line="38" column="9" bodyfile="soviet/src/automator.cpp" bodystart="72" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga6ff3916db9519e3558e3576e47055dc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void soviet::authorize</definition>
        <argsstring>(eosio::name coop_username, eosio::name chairman, uint64_t decision_id)</argsstring>
        <name>authorize</name>
        <qualifiedname>eosio::soviet::authorize</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>coop_username</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>chairman</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>decision_id</declname>
        </param>
        <briefdescription>
<para>Авторизация принятого решения советом </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет председателю совета авторизовать принятое решение совета.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coop_username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chairman</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя председателя совета кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decision_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Идентификатор решения для авторизации</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>chairman</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soviet/soviet.hpp" line="42" column="9" bodyfile="soviet/src/chairman.cpp" bodystart="15" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1gad1fc0777d9b64aeaeb1cde7f413222cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void soviet::createboard</definition>
        <argsstring>(eosio::name coop_username, eosio::name chairman, eosio::name type, std::vector&lt; board_member &gt; members, std::string name, std::string description)</argsstring>
        <name>createboard</name>
        <qualifiedname>eosio::soviet::createboard</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>coop_username</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>chairman</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structboard__member" kindref="compound">board_member</ref> &gt;</type>
          <declname>members</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>description</declname>
        </param>
        <briefdescription>
<para>Создание нового совета кооператива </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет председателю кооператива создать новый совет с указанными членами и параметрами. Если совет создается как совет кооператива, председатель должен быть указан в списке членов совета.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coop_username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chairman</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя председателя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Тип совета. Доступные типы:<itemizedlist>
<listitem><para><bold>soviet</bold> - Совет кооператива (Board of Members)</para>
</listitem><listitem><para><bold>executive</bold> - Правление (Executive Board)</para>
</listitem><listitem><para><bold>audit</bold> - Ревизионный комитет (Audit and Revision Board)</para>
</listitem><listitem><para><bold>other</bold> - Другая комиссия (Other committee) </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>members</parametername>
</parameternamelist>
<parameterdescription>
<para>Список членов совета </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Название совета </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>Описание совета</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>chairman</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soviet/soviet.hpp" line="43" column="9" bodyfile="soviet/src/chairman.cpp" bodystart="59" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1gab5f3356c48b5d4ed1c048125137568e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void soviet::joincoop</definition>
        <argsstring>(eosio::name coop_username, eosio::name username, std::string position_title, eosio::name position)</argsstring>
        <name>joincoop</name>
        <qualifiedname>eosio::soviet::joincoop</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>coop_username</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>position_title</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Заявка на вступление в кооператив </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод вызывается контрактом registrator при поступлении заявления на вступление в кооператив. При успешном вызове формируется повестка на голосование членам совета. Повестка по вопросам регистрации аккаунтов может быть автоматизирована.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coop_username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя пользователя </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position_title</parametername>
</parameternamelist>
<parameterdescription>
<para>Заголовок должности </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Должность</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>_registrator</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soviet/soviet.hpp" line="32" column="9" bodyfile="soviet/src/joincoop.cpp" bodystart="16" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga51caad33b4bf87669059fe0314d674be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void soviet::change</definition>
        <argsstring>(eosio::name coop_username, uint64_t exchange_id)</argsstring>
        <name>change</name>
        <qualifiedname>eosio::soviet::change</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>coop_username</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>exchange_id</declname>
        </param>
        <briefdescription>
<para>Обмен в кооперативе </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод вызывается контрактом marketplace при создании запроса на обмен в кооперативе. При успешном вызове формируется повестка со всеми сопровождающими документами, которая отправляется на голосование членам совета.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coop_username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exchange_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Идентификатор обмена</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>_marketplace</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soviet/soviet.hpp" line="51" column="9" bodyfile="soviet/src/marketplace.cpp" bodystart="14" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga497f15fa085d12b2638cbc96ce85ddd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void soviet::votefor</definition>
        <argsstring>(eosio::name coop_username, eosio::name member, uint64_t decision_id)</argsstring>
        <name>votefor</name>
        <qualifiedname>eosio::soviet::votefor</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>coop_username</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>member</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>decision_id</declname>
        </param>
        <briefdescription>
<para>Голосование за решение совета </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет члену совета голосовать за конкретное решение. Если у члена совета нет права голоса или голосование уже было произведено ранее, процедура завершится ошибкой. После голосования рассчитывается, превысило ли количество голосов &quot;за&quot; заданный процент консенсуса от общего количества членов.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coop_username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя члена совета, голосующего за решение </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decision_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Идентификатор решения, за которое происходит голосование</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>member</computeroutput> или <computeroutput>permission_level{member</computeroutput>, &quot;oracle&quot;_n} </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soviet/soviet.hpp" line="46" column="9" bodyfile="soviet/src/voting.cpp" bodystart="43" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1gac3d33694508208c379e18cb958a312c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void soviet::voteagainst</definition>
        <argsstring>(eosio::name coop_username, eosio::name member, uint64_t decision_id)</argsstring>
        <name>voteagainst</name>
        <qualifiedname>eosio::soviet::voteagainst</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>coop_username</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>member</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>decision_id</declname>
        </param>
        <briefdescription>
<para>Голосование против решения совета </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет члену совета голосовать против конкретного решения. Если у члена совета нет права голоса или голосование уже было произведено ранее, процедура завершится ошибкой.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coop_username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя члена совета, голосующего против решения </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decision_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Идентификатор решения, против которого происходит голосование</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>member</computeroutput> или <computeroutput>permission_level{member</computeroutput>, &quot;provide&quot;_n} </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soviet/soviet.hpp" line="47" column="9" bodyfile="soviet/src/voting.cpp" bodystart="85" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1gac53e1df4741d4e54d05fefbcdd8612b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void soviet::cancelvote</definition>
        <argsstring>(eosio::name coop_username, eosio::name member, uint64_t decision_id)</argsstring>
        <name>cancelvote</name>
        <qualifiedname>eosio::soviet::cancelvote</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>coop_username</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>member</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>decision_id</declname>
        </param>
        <briefdescription>
<para>Отмена голосования членом совета </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет члену совета отменить свой голос, поданный ранее, по конкретному решению. Если голосование не было произведено или решение не найдено, процедура завершится ошибкой.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coop_username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя члена совета, отменяющего свое голосование </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decision_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Идентификатор решения, по которому голосование было проведено</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>member</computeroutput> или <computeroutput>permission_level{member</computeroutput>, &quot;provide&quot;_n} </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soviet/soviet.hpp" line="48" column="9" bodyfile="soviet/src/voting.cpp" bodystart="118" bodyend="152"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Методы действий контракта </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
