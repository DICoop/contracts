<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="main_8cpp" kind="file" language="C++">
    <compoundname>main.cpp</compoundname>
    <includes local="no">boost/test/unit_test.hpp</includes>
    <includes local="no">eosio/chain/contract_table_objects.hpp</includes>
    <includes local="no">eosio/chain/global_property_object.hpp</includes>
    <includes local="no">eosio/chain/resource_limits.hpp</includes>
    <includes local="no">eosio/chain/wast_to_wasm.hpp</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">iostream</includes>
    <includes local="no">boost/test/included/unit_test.hpp</includes>
    <includes local="no">fc/log/logger.hpp</includes>
    <includes local="no">eosio/chain/exceptions.hpp</includes>
    <includes refid="eosio_8system__tester_8hpp" local="yes">eosio.system_tester.hpp</includes>
    <incdepgraph>
      <node id="12">
        <label>eosio.system_tester.hpp</label>
        <link refid="eosio_8system__tester_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>system/tests/main.cpp</label>
        <link refid="main_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>test_symbol.hpp</label>
        <link refid="test__symbol_8hpp"/>
      </node>
      <node id="9">
        <label>boost/test/included/unit_test.hpp</label>
      </node>
      <node id="2">
        <label>boost/test/unit_test.hpp</label>
      </node>
      <node id="15">
        <label>contracts.hpp</label>
      </node>
      <node id="7">
        <label>cstdlib</label>
      </node>
      <node id="14">
        <label>eosio/chain/abi_serializer.hpp</label>
      </node>
      <node id="3">
        <label>eosio/chain/contract_table_objects.hpp</label>
      </node>
      <node id="11">
        <label>eosio/chain/exceptions.hpp</label>
      </node>
      <node id="4">
        <label>eosio/chain/global_property_object.hpp</label>
      </node>
      <node id="5">
        <label>eosio/chain/resource_limits.hpp</label>
      </node>
      <node id="6">
        <label>eosio/chain/wast_to_wasm.hpp</label>
      </node>
      <node id="13">
        <label>eosio/testing/tester.hpp</label>
      </node>
      <node id="10">
        <label>fc/log/logger.hpp</label>
      </node>
      <node id="17">
        <label>fc/variant_object.hpp</label>
      </node>
      <node id="18">
        <label>fstream</label>
      </node>
      <node id="8">
        <label>iostream</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="main_8cpp_1acacb339b6efb313d0a88ab4ef3eebcc9" prot="public" static="no">
        <name>BOOST_TEST_STATIC_LINK</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="system/tests/main.cpp" line="15" column="9" bodyfile="system/tests/main.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="main_8cpp_1ad2e05cc0620ceb8e2cec377f55858a49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void translate_fc_exception</definition>
        <argsstring>(const fc::exception &amp;e)</argsstring>
        <name>translate_fc_exception</name>
        <param>
          <type>const fc::exception &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="system/tests/main.cpp" line="17" column="6" bodyfile="system/tests/main.cpp" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1ad532ca1153e3e97547f6017ea7213e02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::unit_test::test_suite *</type>
        <definition>boost::unit_test::test_suite * init_unit_test_suite</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>init_unit_test_suite</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="system/tests/main.cpp" line="22" column="30" bodyfile="system/tests/main.cpp" bodystart="22" bodyend="46"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;boost/test/unit_test.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;eosio/chain/contract_table_objects.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;eosio/chain/global_property_object.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;eosio/chain/resource_limits.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;eosio/chain/wast_to_wasm.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/test/included/unit_test.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fc/log/logger.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;eosio/chain/exceptions.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="eosio_8system__tester_8hpp" kindref="compound">eosio.system_tester.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceeosio__system" kindref="compound">eosio_system</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOST_TEST_STATIC_LINK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1ad2e05cc0620ceb8e2cec377f55858a49" kindref="member">translate_fc_exception</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fc::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[33m&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>e.to_detail_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[0m&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/>BOOST_TEST_FAIL(</highlight><highlight class="stringliteral">&quot;Caught<sp/>Unexpected<sp/>Exception&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">boost::unit_test::test_suite*<sp/><ref refid="main_8cpp_1ad532ca1153e3e97547f6017ea7213e02" kindref="member">init_unit_test_suite</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Turn<sp/>off<sp/>blockchain<sp/>logging<sp/>if<sp/>no<sp/>--verbose<sp/>parameter<sp/>is<sp/>not<sp/>added</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>have<sp/>verbose<sp/>enabled,<sp/>call<sp/>&quot;tests/chain_test<sp/>--<sp/>--verbose&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_verbose<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>verbose_arg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;--verbose&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>argc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose_arg<sp/>==<sp/>argv[i])<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_verbose<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(is_verbose)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fc::logger::get(DEFAULT_LOGGER).set_log_level(fc::log_level::debug);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fc::logger::get(DEFAULT_LOGGER).set_log_level(fc::log_level::off);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>fc::exception<sp/>translator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/>boost::unit_test::unit_test_monitor.template<sp/>register_exception_translator&lt;fc::exception&gt;(&amp;<ref refid="main_8cpp_1ad2e05cc0620ceb8e2cec377f55858a49" kindref="member">translate_fc_exception</ref>);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/>std::srand(time(NULL));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Random<sp/>number<sp/>generator<sp/>seeded<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>time(NULL)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="system/tests/main.cpp"/>
  </compounddef>
</doxygen>
