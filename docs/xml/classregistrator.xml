<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="ru">
  <compounddef id="classregistrator" kind="class" language="C++" prot="public">
    <compoundname>registrator</compoundname>
    <basecompoundref prot="public" virt="non-virtual">eosio::contract</basecompoundref>
    <includes refid="registrator_8hpp" local="no">registrator.hpp</includes>
    <innerclass refid="structregistrator_1_1balances" prot="public">registrator::balances</innerclass>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classregistrator_1a5031045fe1736a84cd445be212673c0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>registrator::registrator</definition>
        <argsstring>(eosio::name receiver, eosio::name code, eosio::datastream&lt; const char * &gt; ds)</argsstring>
        <name>registrator</name>
        <qualifiedname>registrator::registrator</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>receiver</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>code</declname>
        </param>
        <param>
          <type>eosio::datastream&lt; const char * &gt;</type>
          <declname>ds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="39" column="3" bodyfile="registrator/registrator.hpp" bodystart="39" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classregistrator_1a640dbd37c2d97cc93ff00ec0dc4116be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <qualifiedname>registrator::init</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="43" column="9" bodyfile="registrator/registrator.cpp" bodystart="9" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classregistrator_1aa66e22cb1d9e36f651aae7e88f27453e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::fix</definition>
        <argsstring>()</argsstring>
        <name>fix</name>
        <qualifiedname>registrator::fix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="44" column="9" bodyfile="registrator/registrator.cpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga4bd57034d65697891fa59255c92435bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::updateaccnt</definition>
        <argsstring>(eosio::name username, eosio::name account_to_change, std::string meta)</argsstring>
        <name>updateaccnt</name>
        <qualifiedname>registrator::updateaccnt</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>account_to_change</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>meta</declname>
        </param>
        <briefdescription>
<para>Обновление метаданных аккаунта </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет обновить метаданные указанного аккаунта. Только владелец аккаунта имеет право обновлять его метаданные.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя аккаунта, который требуется обновить </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Новые метаданные для аккаунта</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="46" column="9" bodyfile="registrator/registrator.cpp" bodystart="337" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga9b31f8344a801600abe636d4fa6a2ad8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::updatecoop</definition>
        <argsstring>(eosio::name coopname, eosio::name username, eosio::asset initial, eosio::asset minimum, eosio::asset org_initial, eosio::asset org_minimum, std::string announce, std::string description)</argsstring>
        <name>updatecoop</name>
        <qualifiedname>registrator::updatecoop</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>coopname</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>eosio::asset</type>
          <declname>initial</declname>
        </param>
        <param>
          <type>eosio::asset</type>
          <declname>minimum</declname>
        </param>
        <param>
          <type>eosio::asset</type>
          <declname>org_initial</declname>
        </param>
        <param>
          <type>eosio::asset</type>
          <declname>org_minimum</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>announce</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>description</declname>
        </param>
        <briefdescription>
<para>Обновление метаданных аккаунта </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет обновить метаданные указанного аккаунта. Только владелец аккаунта имеет право обновлять его метаданные.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя аккаунта, который требуется обновить </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Новые метаданные для аккаунта</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="47" column="9" bodyfile="registrator/registrator.cpp" bodystart="367" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1gad0c0f6b1b9a5a3d8f14ca8adf71cf477" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::confirmreg</definition>
        <argsstring>(eosio::name coopname, eosio::name username)</argsstring>
        <name>confirmreg</name>
        <qualifiedname>registrator::confirmreg</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>coopname</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <briefdescription>
<para>Подтверждение регистрации члена кооператива </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет подтвердить регистрацию пользователя (физического или юридического лица) в качестве члена кооператива. Подтверждение может быть осуществлено только аккаунтом контракта совета кооператива после принятия соответствующего решения.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coopname</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя члена кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position_title</parametername>
</parameternamelist>
<parameterdescription>
<para>Название должности </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Код должности (например, chairman, director и др.)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>_soviet</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="49" column="9" bodyfile="registrator/registrator.cpp" bodystart="456" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1gaeb171065ea29f9b5e485a34102ee6291" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::reguser</definition>
        <argsstring>(eosio::name registrator, eosio::name coopname, eosio::name username, eosio::name type)</argsstring>
        <name>reguser</name>
        <qualifiedname>registrator::reguser</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>registrator</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>coopname</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Регистрация пользователя </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод предназначен для регистрации аккаунта в качестве физического лица. После регистрации пользователь получает статус &quot;user&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>registrator</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя регистратора, который регистрирует (обычно, кооператив, но может быть и участником, который регистрирует свою карточку сам) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя пользователя, который регистрируется </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>profile_hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Хэш-ссылка на зашифрованный профиль пользователя, сохраненный в IPFS</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>registrator</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="51" column="9" bodyfile="registrator/registrator.cpp" bodystart="150" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga20903d322ad4dab2a4d2b3b0871f5e26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::regcoop</definition>
        <argsstring>(eosio::name registrator, eosio::name coopname, eosio::name username, org_data params)</argsstring>
        <name>regcoop</name>
        <qualifiedname>registrator::regcoop</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>registrator</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>coopname</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type><ref refid="structorg__data" kindref="compound">org_data</ref></type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Регистрация карточки юридического лица </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет регистрировать аккаунт в качестве юридического лица. Все данные в карточке юридического лица публичны и хранятся в блокчейне.</para>
<para><simplesect kind="note"><para>Авторизация требуется от одного из аккаунтов: <computeroutput>coopname</computeroutput> || username </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="58" column="9" bodyfile="registrator/registrator.cpp" bodystart="186" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga369a1d99c79f0429f2d1f7182382dcd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::joincoop</definition>
        <argsstring>(eosio::name registrator, eosio::name coopname, eosio::name username, document document)</argsstring>
        <name>joincoop</name>
        <qualifiedname>registrator::joincoop</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>registrator</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>coopname</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type><ref refid="structdocument" kindref="compound">document</ref></type>
          <declname>document</declname>
        </param>
        <briefdescription>
<para>Подача заявления на членство в кооперативе </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет подать заявление на вступление в кооператив от имени физического или юридического лица. После подачи заявления, оно направляется на рассмотрение в совет кооператива для голосования.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coopname</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя заявителя </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position_title</parametername>
</parameternamelist>
<parameterdescription>
<para>Наименование должности заявителя </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Код должности заявителя, который может быть одним из следующего списка:<itemizedlist>
<listitem><para>chairman</para>
</listitem><listitem><para>vpchairman</para>
</listitem><listitem><para>director</para>
</listitem><listitem><para>vpdirector</para>
</listitem><listitem><para>boardmember</para>
</listitem><listitem><para>execmember</para>
</listitem><listitem><para>votingmember</para>
</listitem><listitem><para>assocmember </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ricardian_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Переменные шаблона заявления, которые вставляются в рикардианский договор, содержащийся в ABI метода действия контракта. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>statement_hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Хэш ссылка на заявление</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="60" column="9" bodyfile="registrator/registrator.cpp" bodystart="306" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga4edb42d418f1b8d0a7ec00f06b9927ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::verificate</definition>
        <argsstring>(eosio::name username, eosio::name procedure)</argsstring>
        <name>verificate</name>
        <qualifiedname>registrator::verificate</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>procedure</declname>
        </param>
        <briefdescription>
<para>Верификация аккаунта </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет верифицировать аккаунты как пользователей, так и организаций. На данный момент может быть применен только аккаунтом автономной некоммерческой организации &quot;Кооперативная Экономика&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя аккаунта, который подлежит верификации</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="62" column="9" bodyfile="registrator/registrator.cpp" bodystart="244" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga7f70d64012305e3dfca7990bffd3af82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::newaccount</definition>
        <argsstring>(eosio::name registrator, eosio::name coopname, eosio::name referer, eosio::name username, eosio::public_key public_key, std::string meta)</argsstring>
        <name>newaccount</name>
        <qualifiedname>registrator::newaccount</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>registrator</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>coopname</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>referer</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>eosio::public_key</type>
          <declname>public_key</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>meta</declname>
        </param>
        <briefdescription>
<para>Регистрирует новый аккаунт. </para>
        </briefdescription>
        <detaileddescription>
<para>Действие позволяет создать новый аккаунт. Новый аккаунт может быть создан только верифицированной организацией. <simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>registrator</computeroutput> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>registrator</parametername>
</parameternamelist>
<parameterdescription>
<para>Аккаунт, который оплачивает создание нового аккаунта. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referer</parametername>
</parameternamelist>
<parameterdescription>
<para>Реферер, который представил нового пользователя. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя нового аккаунта (от 5 до 12 символов). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>public_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Открытый ключ нового аккаунта. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Дополнительная мета-информация. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="64" column="9" bodyfile="registrator/registrator.cpp" bodystart="85" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga68df314fe90a719f00f0931c097bc6c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::changekey</definition>
        <argsstring>(eosio::name username, eosio::public_key public_key)</argsstring>
        <name>changekey</name>
        <qualifiedname>registrator::changekey</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>eosio::public_key</type>
          <declname>public_key</declname>
        </param>
        <briefdescription>
<para>Изменение ключа активной учетной записи </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет изменить активный ключ указанной учетной записи. Только аккаунт автономной некомерческой организации &quot;Кооперативная Экономика&quot; имеет право изменять ключи учетных записей.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя аккаунта, ключ которого требуется изменить </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>public_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Новый публичный ключ для активной учетной записи</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>_system</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="68" column="9" bodyfile="registrator/registrator.cpp" bodystart="417" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classregistrator_1a23c67801d0d0f374ba1160537ba314fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::check</definition>
        <argsstring>(checksum256 hash, public_key public_key, signature signature)</argsstring>
        <name>check</name>
        <qualifiedname>registrator::check</qualifiedname>
        <param>
          <type>checksum256</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>public_key</type>
          <declname>public_key</declname>
        </param>
        <param>
          <type>signature</type>
          <declname>signature</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="71" column="9" bodyfile="registrator/registrator.cpp" bodystart="3" bodyend="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Класс <computeroutput>registrator</computeroutput> служит воротами в блокчейн-систему для новых участников, позволяя регистрировать аккаунты, а также карточки физических и юридических лиц. Через данный контракт участники могут посылать заявления в совет кооперативов на вступление и получать подтверждения о принятии их заявлений. </para>
    </briefdescription>
    <detaileddescription>
<para>Основные функции класса:<itemizedlist>
<listitem><para>Регистрация новых аккаунтов с различными параметрами (CPU, NET, RAM и т.д.).</para>
</listitem><listitem><para>Регистрация карточек физических и юридических лиц.</para>
</listitem><listitem><para>Обновление метаданных пользователей.</para>
</listitem><listitem><para>Отправка заявлений на вступление в любой кооператив.</para>
</listitem><listitem><para>Создание и изменение ключей доступа к аккаунтам.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>Этот класс служит основой для регистрации и идентификации участников в блокчейн-среде. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>eosio::contract</label>
      </node>
      <node id="1">
        <label>registrator</label>
        <link refid="classregistrator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>eosio::contract</label>
      </node>
      <node id="1">
        <label>registrator</label>
        <link refid="classregistrator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="registrator/registrator.hpp" line="35" column="1" bodyfile="registrator/registrator.hpp" bodystart="36" bodyend="76"/>
    <listofallmembers>
      <member refid="group__public__actions_1ga68df314fe90a719f00f0931c097bc6c5" prot="public" virt="non-virtual"><scope>registrator</scope><name>changekey</name></member>
      <member refid="classregistrator_1a23c67801d0d0f374ba1160537ba314fb" prot="public" virt="non-virtual"><scope>registrator</scope><name>check</name></member>
      <member refid="group__public__actions_1gad0c0f6b1b9a5a3d8f14ca8adf71cf477" prot="public" virt="non-virtual"><scope>registrator</scope><name>confirmreg</name></member>
      <member refid="classregistrator_1aa66e22cb1d9e36f651aae7e88f27453e" prot="public" virt="non-virtual"><scope>registrator</scope><name>fix</name></member>
      <member refid="classregistrator_1a640dbd37c2d97cc93ff00ec0dc4116be" prot="public" virt="non-virtual"><scope>registrator</scope><name>init</name></member>
      <member refid="group__public__actions_1ga369a1d99c79f0429f2d1f7182382dcd8" prot="public" virt="non-virtual"><scope>registrator</scope><name>joincoop</name></member>
      <member refid="group__public__actions_1ga7f70d64012305e3dfca7990bffd3af82" prot="public" virt="non-virtual"><scope>registrator</scope><name>newaccount</name></member>
      <member refid="group__public__actions_1ga20903d322ad4dab2a4d2b3b0871f5e26" prot="public" virt="non-virtual"><scope>registrator</scope><name>regcoop</name></member>
      <member refid="classregistrator_1a5031045fe1736a84cd445be212673c0b" prot="public" virt="non-virtual"><scope>registrator</scope><name>registrator</name></member>
      <member refid="group__public__actions_1gaeb171065ea29f9b5e485a34102ee6291" prot="public" virt="non-virtual"><scope>registrator</scope><name>reguser</name></member>
      <member refid="group__public__actions_1ga4bd57034d65697891fa59255c92435bf" prot="public" virt="non-virtual"><scope>registrator</scope><name>updateaccnt</name></member>
      <member refid="group__public__actions_1ga9b31f8344a801600abe636d4fa6a2ad8" prot="public" virt="non-virtual"><scope>registrator</scope><name>updatecoop</name></member>
      <member refid="group__public__actions_1ga4edb42d418f1b8d0a7ec00f06b9927ae" prot="public" virt="non-virtual"><scope>registrator</scope><name>verificate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
