<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="ru">
  <compounddef id="classregistrator" kind="class" language="C++" prot="public">
    <compoundname>registrator</compoundname>
    <basecompoundref prot="public" virt="non-virtual">eosio::contract</basecompoundref>
    <includes refid="registrator_8hpp" local="no">registrator.hpp</includes>
    <innerclass refid="structregistrator_1_1balances" prot="public">registrator::balances</innerclass>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classregistrator_1a5031045fe1736a84cd445be212673c0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>registrator::registrator</definition>
        <argsstring>(eosio::name receiver, eosio::name code, eosio::datastream&lt; const char * &gt; ds)</argsstring>
        <name>registrator</name>
        <qualifiedname>registrator::registrator</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>receiver</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>code</declname>
        </param>
        <param>
          <type>eosio::datastream&lt; const char * &gt;</type>
          <declname>ds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="26" column="3" bodyfile="registrator/registrator.hpp" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1gac68fe89b4be51de18ac5b5921ca56eed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::update</definition>
        <argsstring>(eosio::name username, std::string meta)</argsstring>
        <name>update</name>
        <qualifiedname>registrator::update</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>meta</declname>
        </param>
        <briefdescription>
<para>Обновление метаданных аккаунта </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет обновить метаданные указанного аккаунта. Только владелец аккаунта имеет право обновлять его метаданные.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя аккаунта, который требуется обновить </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Новые метаданные для аккаунта</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="30" column="9" bodyfile="registrator/registrator.cpp" bodystart="251" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1gade0cb6032b21e1b753ec1b4f2b4bea73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::confirmreg</definition>
        <argsstring>(eosio::name coop_username, eosio::name member, std::string position_title, eosio::name position)</argsstring>
        <name>confirmreg</name>
        <qualifiedname>registrator::confirmreg</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>coop_username</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>member</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>position_title</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Подтверждение регистрации члена кооператива </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет подтвердить регистрацию пользователя (физического или юридического лица) в качестве члена кооператива. Подтверждение может быть осуществлено только аккаунтом контракта совета кооператива после принятия соответствующего решения.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coop_username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя члена кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position_title</parametername>
</parameternamelist>
<parameterdescription>
<para>Название должности </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Код должности (например, chairman, director и др.)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>_soviet</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="31" column="9" bodyfile="registrator/registrator.cpp" bodystart="320" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga25589c2c87b594bea2a82aea5bd1112c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::reguser</definition>
        <argsstring>(eosio::name username, std::string profile_hash)</argsstring>
        <name>reguser</name>
        <qualifiedname>registrator::reguser</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>profile_hash</declname>
        </param>
        <briefdescription>
<para>Регистрация пользователя </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод предназначен для регистрации аккаунта в качестве физического лица. После регистрации пользователь получает статус &quot;user&quot;. Принимает хэш-ссылку на зашифрованный профиль, сохраненный в IPFS.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя пользователя, который регистрируется </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>profile_hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Хэш-ссылка на зашифрованный профиль пользователя, сохраненный в IPFS</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="33" column="9" bodyfile="registrator/registrator.cpp" bodystart="85" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga917f5557795120c2e303be599030d563" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::regorg</definition>
        <argsstring>(new_org_struct new_org)</argsstring>
        <name>regorg</name>
        <qualifiedname>registrator::regorg</qualifiedname>
        <param>
          <type><ref refid="structnew__org__struct" kindref="compound">new_org_struct</ref></type>
          <declname>new_org</declname>
        </param>
        <briefdescription>
<para>Регистрация юридического лица </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет регистрировать аккаунт в качестве юридического лица. Все данные в карточке юридического лица публичны и хранятся в блокчейне.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_org</parametername>
</parameternamelist>
<parameterdescription>
<para>Структура данных нового юридического лица</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>new_org.username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="35" column="9" bodyfile="registrator/registrator.cpp" bodystart="170" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga575710c03cd02b5e813816ea7e51500e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::joincoop</definition>
        <argsstring>(eosio::name coop_username, eosio::name username, std::string position_title, eosio::name position, std::string ricardian_data, std::string statement_hash)</argsstring>
        <name>joincoop</name>
        <qualifiedname>registrator::joincoop</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>coop_username</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>position_title</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>position</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ricardian_data</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>statement_hash</declname>
        </param>
        <briefdescription>
<para>Подача заявления на членство в кооперативе </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет подать заявление на вступление в кооператив от имени физического или юридического лица. После подачи заявления, оно направляется на рассмотрение в совет кооператива для голосования.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coop_username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя кооператива </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя заявителя </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position_title</parametername>
</parameternamelist>
<parameterdescription>
<para>Наименование должности заявителя </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Код должности заявителя, который может быть одним из следующего списка:<itemizedlist>
<listitem><para>chairman</para>
</listitem><listitem><para>vpchairman</para>
</listitem><listitem><para>director</para>
</listitem><listitem><para>vpdirector</para>
</listitem><listitem><para>boardmember</para>
</listitem><listitem><para>execmember</para>
</listitem><listitem><para>votingmember</para>
</listitem><listitem><para>assocmember </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ricardian_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Переменные шаблона заявления, которые вставляются в рикардианский договор, содержащийся в ABI метода действия контракта. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>statement_hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Хэш ссылка на заявление</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>username</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="37" column="9" bodyfile="registrator/registrator.cpp" bodystart="226" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga7bb89160d6aa3dc59c5f78daeb0a6476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::verificate</definition>
        <argsstring>(eosio::name username)</argsstring>
        <name>verificate</name>
        <qualifiedname>registrator::verificate</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <briefdescription>
<para>Верификация аккаунта </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет верифицировать аккаунты как пользователей, так и организаций. На данный момент может быть применен только аккаунтом автономной некоммерческой организации &quot;Кооперативная Экономика&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя аккаунта, который подлежит верификации</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>_ano</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="39" column="9" bodyfile="registrator/registrator.cpp" bodystart="127" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1gacdfebb1a75a61c5d88ac5c280033d5b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::newaccount</definition>
        <argsstring>(eosio::name registrator, eosio::name referer, eosio::name username, eosio::public_key public_key, eosio::asset cpu, eosio::asset net, uint64_t ram_bytes, std::string meta)</argsstring>
        <name>newaccount</name>
        <qualifiedname>registrator::newaccount</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>registrator</declname>
          <defname>payer</defname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>referer</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>eosio::public_key</type>
          <declname>public_key</declname>
        </param>
        <param>
          <type>eosio::asset</type>
          <declname>cpu</declname>
        </param>
        <param>
          <type>eosio::asset</type>
          <declname>net</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>ram_bytes</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>meta</declname>
        </param>
        <briefdescription>
<para>Регистрирует новый аккаунт. </para>
        </briefdescription>
        <detaileddescription>
<para>Действие позволяет создать новый аккаунт, выполнив все необходимые шаги по резервированию RAM, делегированию CPU и NET, а также регистрации пользователя в контракте. <simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>payer</computeroutput> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>payer</parametername>
</parameternamelist>
<parameterdescription>
<para>Аккаунт, который оплачивает создание нового аккаунта. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referer</parametername>
</parameternamelist>
<parameterdescription>
<para>Реферер, который представил нового пользователя. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя нового аккаунта. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>public_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Открытый ключ нового аккаунта. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Количество AXON, делегированных на CPU для нового аккаунта. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>net</parametername>
</parameternamelist>
<parameterdescription>
<para>Количество AXON, делегированных на NET для нового аккаунта. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ram_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Количество RAM в байтах для нового аккаунта. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Дополнительная мета-информация. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="41" column="9" bodyfile="registrator/registrator.cpp" bodystart="22" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="group__public__actions_1ga68df314fe90a719f00f0931c097bc6c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::changekey</definition>
        <argsstring>(eosio::name username, eosio::public_key public_key)</argsstring>
        <name>changekey</name>
        <qualifiedname>registrator::changekey</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>username</declname>
        </param>
        <param>
          <type>eosio::public_key</type>
          <declname>public_key</declname>
        </param>
        <briefdescription>
<para>Изменение ключа активной учетной записи </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод позволяет изменить активный ключ указанной учетной записи. Только аккаунт автономной некомерческой организации &quot;Кооперативная Экономика&quot; имеет право изменять ключи учетных записей.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя аккаунта, ключ которого требуется изменить </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>public_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Новый публичный ключ для активной учетной записи</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Авторизация требуется от аккаунта: <computeroutput>_ano</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="46" column="9" bodyfile="registrator/registrator.cpp" bodystart="281" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classregistrator_1a459e96e1cc7864c070000cbdcdad1d82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registrator::apply</definition>
        <argsstring>(uint64_t receiver, uint64_t code, uint64_t action)</argsstring>
        <name>apply</name>
        <qualifiedname>registrator::apply</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>receiver</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="registrator/registrator.hpp" line="49" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Начните ознакомление здесь. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>eosio::contract</label>
      </node>
      <node id="1">
        <label>registrator</label>
        <link refid="classregistrator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>eosio::contract</label>
      </node>
      <node id="1">
        <label>registrator</label>
        <link refid="classregistrator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="registrator/registrator.hpp" line="23" column="1" bodyfile="registrator/registrator.hpp" bodystart="23" bodyend="61"/>
    <listofallmembers>
      <member refid="classregistrator_1a459e96e1cc7864c070000cbdcdad1d82" prot="public" virt="non-virtual"><scope>registrator</scope><name>apply</name></member>
      <member refid="group__public__actions_1ga68df314fe90a719f00f0931c097bc6c5" prot="public" virt="non-virtual"><scope>registrator</scope><name>changekey</name></member>
      <member refid="group__public__actions_1gade0cb6032b21e1b753ec1b4f2b4bea73" prot="public" virt="non-virtual"><scope>registrator</scope><name>confirmreg</name></member>
      <member refid="group__public__actions_1ga575710c03cd02b5e813816ea7e51500e" prot="public" virt="non-virtual"><scope>registrator</scope><name>joincoop</name></member>
      <member refid="group__public__actions_1gacdfebb1a75a61c5d88ac5c280033d5b7" prot="public" virt="non-virtual"><scope>registrator</scope><name>newaccount</name></member>
      <member refid="classregistrator_1a5031045fe1736a84cd445be212673c0b" prot="public" virt="non-virtual"><scope>registrator</scope><name>registrator</name></member>
      <member refid="group__public__actions_1ga917f5557795120c2e303be599030d563" prot="public" virt="non-virtual"><scope>registrator</scope><name>regorg</name></member>
      <member refid="group__public__actions_1ga25589c2c87b594bea2a82aea5bd1112c" prot="public" virt="non-virtual"><scope>registrator</scope><name>reguser</name></member>
      <member refid="group__public__actions_1gac68fe89b4be51de18ac5b5921ca56eed" prot="public" virt="non-virtual"><scope>registrator</scope><name>update</name></member>
      <member refid="group__public__actions_1ga7bb89160d6aa3dc59c5f78daeb0a6476" prot="public" virt="non-virtual"><scope>registrator</scope><name>verificate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
